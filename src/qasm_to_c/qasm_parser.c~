#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void generateCFile(const char *outputFilename, int numQubits) {
    FILE *outputFile = fopen(outputFilename, "w");
    if (outputFile == NULL) {
        perror("Errore nella creazione del file C");
        exit(EXIT_FAILURE);
    }

    fprintf(outputFile, "#include \"quantum_sim.h\"\n");
    fprintf(outputFile, "#include <stdio.h>\n\n");
    fprintf(outputFile, "void circuit() {\n");
    fprintf(outputFile, "    int numQubits = %d;\n", numQubits); // Definisce il numero di qubits
    fprintf(outputFile, "    QubitState *state = initializeState(numQubits);\n\n");

    fclose(outputFile);
}

void finalizeCFile(const char *outputFilename) {
    FILE *outputFile = fopen(outputFilename, "a");
    if (outputFile == NULL) {
        perror("Errore nella creazione del file C");
        exit(EXIT_FAILURE);
    }

    fprintf(outputFile, "    printState(state);\n");
    fprintf(outputFile, "    freeState(state);\n");
    fprintf(outputFile, "}\n");

    fclose(outputFile);
}

void parseQASM(const char *filename, const char *outputFilename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Errore nell'apertura del file QASM");
        exit(EXIT_FAILURE);
    }

    int numQubits = 0;
    char line[256];

    // Prima passata: Trova il numero di qubit
    while (fgets(line, sizeof(line), file)) {
        if (strstr(line, "qreg")) {
            sscanf(line, "qreg q[%d];", &numQubits);
            break;
        }
    }

    if (numQubits == 0) {
        fprintf(stderr, "Errore: qreg non trovato o numero di qubits non valido.\n");
        fclose(file);
        exit(EXIT_FAILURE);
    }

    // Crea il file C con il numero di qubits trovato
    generateCFile(outputFilename, numQubits);

    // Seconda passata: Analizza le istruzioni e le aggiunge al file C
    rewind(file); // Riavvolge il file per la seconda passata
    FILE *outputFile = fopen(outputFilename, "a"); // Apre in modalit√† append

    while (fgets(line, sizeof(line), file)) {
        if (strstr(line, "qreg")) {
            // Ignora la definizione del registro quantistico
            continue;
        } else if (strstr(line, "h ")) {
            int qubit;
            sscanf(line, "h q[%d];", &qubit);
            fprintf(outputFile, "    applyHadamard(state, %d);\n", qubit);
        } else if (strstr(line, "cx ")) {
            int control, target;
            sscanf(line, "cx q[%d],q[%d];", &control, &target);
            fprintf(outputFile, "    applyCNOT(state, %d, %d);\n", control, target);
        } else if (strstr(line, "x ")) {
            int qubit;
            sscanf(line, "x q[%d];", &qubit);
            fprintf(outputFile, "    applyX(state, %d);\n", qubit);
        } else {
            fprintf(outputFile, "    // Istruzione non riconosciuta: %s", line);
        }
    }

    fclose(file);
    fclose(outputFile);

    // Finalizza il file C
    finalizeCFile(outputFilename);
}

int main(int argc, char *argv[]) {
    if (argc < 3) {
        fprintf(stderr, "Utilizzo: %s <file.qasm> <output.c>\n", argv[0]);
        return EXIT_FAILURE;
    }

    parseQASM(argv[1], argv[2]);

    return EXIT_SUCCESS;
}
